import { prisma } from "@/config";
import { emitNotification } from "@/socket";

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–ª–ø–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
 *
 * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 * @param options - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export const sendNotification = async (
  userId: number,
  options: {
    type: NotificationType;
    title: string;
    body?: string;
    data?: Record<string, any>;
    silent?: boolean; // –µ—Å–ª–∏ true ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ socket (—Ç–æ–ª—å–∫–æ –≤ –ë–î)
  }
) => {
  try {
    const notif = await prisma.notifications.create({
      data: {
        user_id: userId,
        type: options.type,
        title: options.title,
        body: options.body ?? null,
        data: options.data ? JSON.stringify(options.data) : null,
      },
    });

    // üîî –†–∞—Å—Å—ã–ª–∞–µ–º realtime-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ silent
    if (!options.silent) {
      emitNotification(userId, notif);
    }

    return notif;
  } catch (err) {
    console.error("sendNotification error:", err);
    throw err;
  }
};

// üí¨ –¢–∏–ø—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω—è—Ç—å)
export type NotificationType =
  | "friend_request"
  | "friend_accept"
  | "friend_reject"
  | "friend_remove"
  | "server_invite"
  | "server_kick"
  | "message_mention"
  | "assign_role"
  | "remove_role"
  | "system";
