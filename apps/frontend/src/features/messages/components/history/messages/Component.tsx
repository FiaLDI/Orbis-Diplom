import React, { useMemo } from "react";
import { SingleMessageProps } from "./interface";
import { useAppSelector } from "@/app/hooks";
import { makeSelectIsMessageOpen } from "@/features/messages";
import { config } from "@/config";

const CoreComponent: React.FC<SingleMessageProps> = ({ message, onClick, currentUser }) => {
  const selectIsOpen = useMemo(
    () => makeSelectIsMessageOpen(String(message.id)),
    [message.id],
  );
  const isOpen = useAppSelector(selectIsOpen);

  // üîπ –í—ã–±–∏—Ä–∞–µ–º –∞–≤–∞—Ç–∞—Ä (–∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç)
  const avatarSrc =
  message.user_id === currentUser?.id && currentUser?.avatar_url
    ? currentUser.avatar_url // –≤—Å–µ–≥–¥–∞ –±–µ—Ä—ë–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏–∑ —Å—Ç–æ—Ä–∞
    : message.avatar_url
    ? (message.avatar_url.startsWith("http")
        ? message.avatar_url
        : `${config.cdnServiceUrl}/${message.avatar_url}`)
    : "img/icon.png";

  return (
    <div
      onContextMenu={(e: React.MouseEvent<HTMLDivElement, MouseEvent>) => onClick?.(e, message)}
      className={
        isOpen
          ? "bg-[#7895f3] flex gap-5 lg:gap-3"
          : "flex gap-5 lg:gap-3"
      }
    >
      {/* üë§ –ê–≤–∞—Ç–∞—Ä */}
      <div className="self-start p-1">
        <img
          src={avatarSrc}
          alt={`–ê–≤–∞—Ç–∞—Ä ${message.username}`}
          className="w-20 h-20 lg:w-10 lg:h-10 rounded-full object-cover border border-[#ffffff33]"
        />
      </div>

      {/* üí¨ –¢–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è */}
      <div>
        <h3 className="text-3xl lg:text-base font-semibold">
          {message.username}{" "}
          <span className="text-2xl lg:text-sm opacity-70">
            {new Date(message.timestamp).toLocaleTimeString([], {
              hour: "2-digit",
              minute: "2-digit",
            })}
          </span>
        </h3>

        {/* üß© –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–π */}
        {message.content?.map((val) => {
          if (!val) return null;

          // üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          if (val.type === "text") {
            return (
              <div
                key={val.id}
                className="text-3xl lg:text-base break-words whitespace-pre-wrap"
              >
                {val.text}
              </div>
            );
          }

          // üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          if (val.type === "image" && val.url) {
            return (
              <div key={val.id} className="my-2">
                <img
                  src={
                    val.url.startsWith("http")
                      ? val.url
                      : `${config.cdnServiceUrl}/${val.url}`
                  }
                  alt={val.text || "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"}
                  className="max-w-[700px] rounded-lg border border-[#ffffff22]"
                />
              </div>
            );
          }

          // üìÅ –§–∞–π–ª—ã
          if (val.type === "file" && val.url) {
            return (
              <div
                key={val.id}
                className="text-3xl lg:text-base flex items-center gap-2"
              >
                <span>{val.text}</span>
                <a
                  href={
                    val.url.startsWith("http")
                      ? val.url
                      : `${config.cdnServiceUrl}/download?url=${encodeURIComponent(val.url)}`
                  }
                  target="_blank"
                  rel="noreferrer"
                  className="text-blue-400 underline hover:text-blue-300"
                >
                  –°–∫–∞—á–∞—Ç—å
                </a>
              </div>
            );
          }

          return null;
        })}
      </div>
    </div>
  );
};

export const Component = React.memo(
  CoreComponent,
  (prevProps, nextProps) => prevProps.message === nextProps.message,
);
